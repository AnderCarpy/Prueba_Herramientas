// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Aenit.API.Migrations
{
    [DbContext(typeof(AppContext))]
    partial class AppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Aenit.Certificado", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InscripcionCodigo")
                        .HasColumnType("integer");

                    b.HasKey("Codigo");

                    b.HasIndex("InscripcionCodigo");

                    b.ToTable("Certificados", (string)null);
                });

            modelBuilder.Entity("Aenit.Evento", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Codigo");

                    b.ToTable("Eventos", (string)null);
                });

            modelBuilder.Entity("Aenit.Inscripcion", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventoCodigo")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaInscripcion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParticipanteCodigo")
                        .HasColumnType("integer");

                    b.HasKey("Codigo");

                    b.HasIndex("EventoCodigo");

                    b.HasIndex("ParticipanteCodigo");

                    b.ToTable("Inscripciones", (string)null);
                });

            modelBuilder.Entity("Aenit.Pago", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InscripcionCodigo")
                        .HasColumnType("integer");

                    b.Property<double>("MontoPago")
                        .HasColumnType("double precision");

                    b.HasKey("Codigo");

                    b.HasIndex("InscripcionCodigo");

                    b.ToTable("Pagos", (string)null);
                });

            modelBuilder.Entity("Aenit.Participante", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Codigo");

                    b.ToTable("Participantes", (string)null);
                });

            modelBuilder.Entity("Aenit.Ponente", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EventoCodigo")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Codigo");

                    b.HasIndex("EventoCodigo");

                    b.ToTable("Ponentes", (string)null);
                });

            modelBuilder.Entity("Aenit.Sala", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<int>("Capacidad")
                        .HasColumnType("integer");

                    b.Property<string>("NombreSala")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Codigo");

                    b.ToTable("Salas", (string)null);
                });

            modelBuilder.Entity("Aenit.Sesion", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<int>("EventoCodigo")
                        .HasColumnType("integer");

                    b.Property<int>("EventoSala")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SalaCodigo")
                        .HasColumnType("integer");

                    b.HasKey("Codigo");

                    b.HasIndex("EventoCodigo");

                    b.HasIndex("SalaCodigo");

                    b.ToTable("Sesiones", (string)null);
                });

            modelBuilder.Entity("Aenit.Certificado", b =>
                {
                    b.HasOne("Aenit.Inscripcion", "Inscripcion")
                        .WithMany()
                        .HasForeignKey("InscripcionCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inscripcion");
                });

            modelBuilder.Entity("Aenit.Inscripcion", b =>
                {
                    b.HasOne("Aenit.Evento", "Evento")
                        .WithMany("Inscripciones")
                        .HasForeignKey("EventoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aenit.Participante", "Participante")
                        .WithMany()
                        .HasForeignKey("ParticipanteCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Participante");
                });

            modelBuilder.Entity("Aenit.Pago", b =>
                {
                    b.HasOne("Aenit.Inscripcion", "Inscripcion")
                        .WithMany()
                        .HasForeignKey("InscripcionCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inscripcion");
                });

            modelBuilder.Entity("Aenit.Ponente", b =>
                {
                    b.HasOne("Aenit.Evento", null)
                        .WithMany("Ponentes")
                        .HasForeignKey("EventoCodigo");
                });

            modelBuilder.Entity("Aenit.Sesion", b =>
                {
                    b.HasOne("Aenit.Evento", "Evento")
                        .WithMany("Sesiones")
                        .HasForeignKey("EventoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aenit.Sala", "Sala")
                        .WithMany("Sesiones")
                        .HasForeignKey("SalaCodigo");

                    b.Navigation("Evento");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("Aenit.Evento", b =>
                {
                    b.Navigation("Inscripciones");

                    b.Navigation("Ponentes");

                    b.Navigation("Sesiones");
                });

            modelBuilder.Entity("Aenit.Sala", b =>
                {
                    b.Navigation("Sesiones");
                });
#pragma warning restore 612, 618
        }
    }
}
